// save_data.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <windows.h>
//#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

#include "mysql_connection.h" 
#include "mysql_driver.h"
#include <cppconn/exception.h>
#include <cppconn/prepared_statement.h>

using namespace std;
//DLL int GetString(std::string& text);

void seperate(string stock[], sql::Statement *stmt){

	
	string command = "";
	const char* data = command.c_str();
	stringstream buffer;
	ifstream t;
	string ss = "";
	string locn = "";
	
		
			for (int i = 0; i < 51; i++){
				try{
				buffer.str(string());
				locn = "E:/depth/" + stock[i] + ".txt";
				t.open(locn);
				buffer << t.rdbuf();
				t.close();
				ss = buffer.str();
				// regex reg = regex("\\<[^\\>]*\\>");
				//	regex e("\\<[^\\>]*\\>");
				//ss =	regex_replace(ss,e,"");
				/*regex b("\\r\\n");
				ss = regex_replace(ss,b, "");
				if (ss.find("</t0>")!= -1)*/
				command = "insert into `test`.`depth` values (\"";
				unsigned first = ss.find("<t14>"); unsigned last = ss.find("</t14>"); string val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t6>"); last = ss.find("</t6>"); val = ss.substr(first + 4, last - first - 4);
				command = command + val + "\",\"";
				first = ss.find("<t4>"); last = ss.find("</t4>"); val = ss.substr(first + 4, last - first - 4);
				command = command + val + "\",\"";
				first = ss.find("<t5>"); last = ss.find("</t5>"); val = ss.substr(first + 4, last - first - 4);
				command = command + val + "\",\"";
				first = ss.find("<t7>"); last = ss.find("</t7>"); val = ss.substr(first + 4, last - first - 4);
				command = command + val + "\",\"";
				first = ss.find("<t8>"); last = ss.find("</t8>"); val = ss.substr(first + 4, last - first - 4);
				command = command + val + "\",\"";
				first = ss.find("<t10>"); last = ss.find("</t10>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t11>"); last = ss.find("</t11>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t12>"); last = ss.find("</t12>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t19>"); last = ss.find("</t19>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t20>"); last = ss.find("</t20>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t13>"); last = ss.find("</t13>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t17>"); last = ss.find("</t17>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t3>"); last = ss.find("</t3>"); val = ss.substr(first + 4, last - first - 4);
				command = command + val + "\",\"";
				first = ss.find("<t25>"); last = ss.find("</t25>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t26>"); last = ss.find("</t26>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t27>"); last = ss.find("</t27>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t28>"); last = ss.find("</t28>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t29>"); last = ss.find("</t29>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t30>"); last = ss.find("</t30>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t31>"); last = ss.find("</t31>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t32>"); last = ss.find("</t32>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t33>"); last = ss.find("</t33>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t34>"); last = ss.find("</t34>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t35>"); last = ss.find("</t35>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t36>"); last = ss.find("</t36>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t37>"); last = ss.find("</t37>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t38>"); last = ss.find("</t38>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t39>"); last = ss.find("</t39>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t40>"); last = ss.find("</t40>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t41>"); last = ss.find("</t41>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t42>"); last = ss.find("</t42>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t43>"); last = ss.find("</t43>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t44>"); last = ss.find("</t44>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t45>"); last = ss.find("</t45>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t46>"); last = ss.find("</t46>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t47>"); last = ss.find("</t47>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t48>"); last = ss.find("</t48>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t49>"); last = ss.find("</t49>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t50>"); last = ss.find("</t50>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t51>"); last = ss.find("</t51>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t52>"); last = ss.find("</t52>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t53>"); last = ss.find("</t53>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\"";
				first = ss.find("<t54>"); last = ss.find("</t54>"); val = ss.substr(first + 5, last - first - 5);
				command = command + val + "\",\""+stock[i]+"\");";
				data = command.c_str();
				//try{
				stmt->execute(data);
				//}
				//catch (sql::SQLException &e){}
			}
			catch (...){}
		}
		
	
}

int  WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{


	string stock[51] = { "ADANIENT", "ADANIPORTS", "AMBUJACEM", "APOLLOTYRE", "ARVIND", "AXISBANK", "BANKINDIA", "BHARTIARTL", "BHEL", "BIOCON", "CANBK", "COALINDIA", "DABUR", "DLF", "EXIDEIND", "GAIL", "GODREJIND", "HAVELLS", "HEXAWARE", "ICICIBANK", "IDEA", "IDFC", "IGL", "INDIACEM", "IOC", "IRB", "ITC", "JSWENERGY", "KTKBANK", "LICHSGFIN", "MMFIN", "ONGC", "ORIENTBANK", "PETRONET", "PFC", "POWERGRID", "RECLTD", "RELCAPITAL", "RELINFRA", "SBIN", "SUNTV", "TATACHEM", "TATACOMM", "TATAMOTORS", "TATAMTRDVR", "TATASTEEL", "TITAN", "UNIONBANK", "UPL", "VOLTAS", "ZEEL" };
	sql::Connection *con;
	sql::Statement *stmt;
	sql::Driver *driver;
	driver = get_driver_instance();
	con = driver->connect("tcp://127.0.0.1:3306", "root", "root");
	con->setSchema("test");
	stmt = con->createStatement();

	while (1)
	//for (int i = 0; i < 10000; i++)
	{
		seperate(stock, stmt);
	//}

		}//while
	delete stmt;
	delete con;
	return 0;
	//system("pause");
}
